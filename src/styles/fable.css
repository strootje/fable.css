:root {
	--2xs: calc(var(--md) / 4);
	--xs: calc(var(--md) / 3);
	--sm: calc(var(--md) / 2);
	--md: var(--base, 8px);
	--lg: calc(var(--md) * 2);
	--xl: calc(var(--md) * 3);
	--2xl: calc(var(--md) * 4);
}

:where(ol, ul, menu):where(.grid, .stack, .level) {
	list-style: none;
}

:where(.grid, .stack, .level) {
	&:not(.no-gap, .no-horizontal-gap) {
		column-gap: var(--md);
	}

	&:not(.no-gap, .no-vertical-gap) {
		row-gap: var(--md);
	}

	@each $size in $sizes {
		&:where(.gap-$size, .gap-horizontal-$size) {
			column-gap: var(--$size);
		}

		&:where(.gap-$size, .gap-vertical-$size) {
			row-gap: var(--$size);
		}
	}
}

/* ===== Layout / Grid ======================= */
/* =========================================== */

.grid {
	&:where(:not(dialog), dialog[open]) {
		display: grid;
	}

	&:not(.no-inherit) > .grid {
		grid-template-columns: subgrid;
	}

	&.top {
		align-content: start;
	}
	&:not(.top, .bottom).center {
		align-content: center;
	}
	&.bottom {
		align-content: end;
	}

	&.left {
		justify-items: start;
	}
	&:not(.left, .right).center {
		justify-items: center;
	}
	&.right {
		justify-items: end;
	}

	& > .pin-top {
		align-self: start;
	}
	& > .pin-center:not(.pin-top, .pin-bottom) {
		align-self: center;
	}
	& > .pin-bottom {
		align-self: end;
	}

	& > .pin-left {
		justify-self: start;
	}
	& > .pin-center:not(.pin-left, .pin-right) {
		justify-self: center;
	}
	& > .pin-right {
		justify-self: end;
	}
}

/* ===== Layout / Stack + Level ============== */
/* =========================================== */

:where(.stack, .level) {
	&:where(:not(dialog), dialog[open]) {
		display: flex;
	}

	&.stack:not(.reverse) {
		flex-direction: column;
	}
	&.reverse.level {
		flex-direction: row-reverse;
	}
	&.reverse.stack {
		flex-direction: column-reverse;
	}

	&.wrap {
		flex-wrap: wrap;
	}

	&:not(.gap-auto):is(.level.left, .stack.top) {
		justify-content: start;
	}
	&:not(.gap-auto):is(.center):not(.level:is(.left, .right), .stack:is(.top, .bottom)) {
		justify-content: center;
	}
	&:not(.gap-auto):is(.level.right, .stack.bottom) {
		justify-content: end;
	}

	&:is(.level.top, .stack.left) {
		align-items: start;
	}
	&:is(.center):not(.level:is(.top, .bottom), .stack:is(.left, .right)) {
		align-items: center;
	}
	&:is(.level.bottom, .stack.right) {
		align-items: end;
	}

	&.level > .pin-top,
	&.stack > .pin-left {
		align-self: start;
	}

	& > .pin-center {
		align-self: center;
	}
	& > .stretch {
		align-self: stretch;
	}
	
	&.level > .pin-bottom,
	&.stack > .pin-right {
		align-self: end;
	}

	&.gap-auto {
		justify-content: space-between;
	}

	& > .grow {
		flex-grow: 1;
	}
}
