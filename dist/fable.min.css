:root {
	--2xs: calc(var(--md) / 4);
	--xs: calc(var(--md) / 3);
	--sm: calc(var(--md) / 2);
	--md: var(--base, 8px);
	--lg: calc(var(--md) * 2);
	--xl: calc(var(--md) * 3);
	--2xl: calc(var(--md) * 4);
}

:where(ol, ul, menu):where(.grid, .stack, .level) {
	list-style: none;
}

:where(.grid, .stack, .level) {
	&:not(.no-gap) {
		gap: var(--md);
	}
		&.gap-2xs {
			gap: var(--2xs);
		}
		&.gap-xs {
			gap: var(--xs);
		}
		&.gap-sm {
			gap: var(--sm);
		}
		&.gap-md {
			gap: var(--md);
		}
		&.gap-lg {
			gap: var(--lg);
		}
		&.gap-xl {
			gap: var(--xl);
		}
		&.gap-2xl {
			gap: var(--2xl);
		}
}

/* ===== Layout / Grid ======================= */

/* =========================================== */

.grid {
	&:where(:not(dialog), dialog[open]) {
		display: grid;
	}

	&:not(.no-inherit) > .grid {
		grid-template-columns: subgrid;
	}

	&.top {
		align-items: start;
	}
	&:not(.top, .bottom).center {
		align-items: center;
	}
	&.bottom {
		align-items: end;
	}

	&.left {
		justify-items: start;
	}
	&:not(.left, .right).center {
		justify-items: center;
	}
	&.right {
		justify-items: end;
	}

	& > .pin-top {
		align-self: start;
	}
	& > .pin-center:not(.pin-top, .pin-bottom) {
		align-self: center;
	}
	& > .pin-bottom {
		align-self: end;
	}

	& > .pin-left {
		justify-self: start;
	}
	& > .pin-center:not(.pin-left, .pin-right) {
		justify-self: center;
	}
	& > .pin-right {
		justify-self: end;
	}

	&:where(body).holy-grail {
		grid-template-rows:
			[header] var(--header-height, max-content)
			[content] auto
			[footer] var(--footer-height, max-content);

		grid-template-columns:
			[fullbleed-start]
			max(var(--md), ((100vw - var(--content-width, 1140px)) / 2))
			[content-start]
			repeat(var(--columns, 12), 1fr)
			[content-end]
			max(var(--md), ((100vw - var(--content-width, 1140px)) / 2))
			[fullbleed-end];

		& > :not(.hero) {
			grid-column: content;
		}

		& .hero {
			grid-column: fullbleed;

			&.grid > * {
				grid-column: content;
			}
		}

		& > header {
			grid-row: header;
		}
		& > main {
			grid-row: content;
		}
		& > footer {
			grid-row: footer;
		}
	}
}

/* ===== Layout / Stack + Level ============== */

/* =========================================== */

:where(.stack, .level) {
	&:where(:not(dialog), dialog[open]) {
		display: flex;
	}

	&.stack:not(.reverse) {
		flex-direction: column;
	}
	&.reverse.level {
		flex-direction: row-reverse;
	}
	&.reverse.stack {
		flex-direction: column-reverse;
	}

	&.wrap {
		flex-wrap: wrap;
	}

	&:not(.gap-auto):is(.level.left, .stack.top) {
		justify-content: start;
	}
	&:not(.gap-auto):is(.center):not(.level:is(.left, .right), .stack:is(.top, .bottom)) {
		justify-content: center;
	}
	&:not(.gap-auto):is(.level.right, .stack.bottom) {
		justify-content: end;
	}

	&:is(.level.top, .stack.left) {
		align-items: start;
	}
	&:is(.center):not(.level:is(.top, .bottom), .stack:is(.left, .right)) {
		align-items: center;
	}
	&:is(.level.bottom, .stack.right) {
		align-items: end;
	}

	&.level > .pin-top,
	&.stack > .pin-left {
		align-self: start;
	}

	& > .pin-center {
		align-self: center;
	}
	& > .stretch {
		align-self: stretch;
	}
	
	&.level > .pin-bottom,
	&.stack > .pin-right {
		align-self: end;
	}

	&.gap-auto {
		justify-content: space-between;
	}

	& > .grow {
		flex-grow: 1;
	}
}
